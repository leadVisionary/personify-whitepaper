How do we build the Energizer with Personify?

We can view an Energizer as a higher level combination of specializations of the base archetypes of the Personify system: A Collector and a Negotiator. Building on the recursive nature of agents, A Collector is itself a specialized combination of a Scout, an Archivist, and an Analyst. Examples may prove fruitful.

Base archetypes are finely grained composable abstractions[] that adhere to the Single Responsibility Principle[]. 

For example, the Scout's responsibility is to retrieve data. Scout simply exposes an operation get(), which returns a Data Transfer Object[] with a results property. 

In order to make the base archetypes as flexible as possible, they use Design Patterns[]. These patterns are chosen to increase the configurability and abstraction of the archetypes, hence pieces such as Strategy, Template Method, and Chain of Responsibility which are extensible by specializations. 

For example, the Scout exposes a RetrievalStrategy, FilteringStrategy, and FormattingStrategy, to be filled in by specializations. 

Specializations are thin, they apply the Decorator Pattern to configure their underlying archetypes with just enough information to get the job done. 

For example, an EnergizerScout decorates a Scout and configures its RetrievalStrategy with an operation that finds an Energizer to retrieve information from, its FilteringStrategy to get only information about current energy availability, and its FormattingStrategy to return information in the Javascript Object Notation for parsing and display by a Presenter. 

Specializations also hold the reasoning logic an agent uses its tasks. They are configured with Beliefs, Capabilities, and Choices, a combination of different Agent-Oriented Programming approaches[][]  

An Archivist's responsibility is to store Records in a StorageLocation. simply exposes Create/Read/Update/Delete functionality     

References:
B. Cross, "Why prismatic goes faster with clojure," in Clojure/West, Mar. 2012.

R. C. Martin and M. Martin, Agile Principles, Patterns, and Practices in C#, 1st ed.    Prentice Hall, Jul. 2006. [Online]. Available: http://www.worldcat.org/isbn/0131857258

M. Fowler, Patterns of Enterprise Application Architecture, 1st ed.    Addison-Wesley Professional, Nov. 2002. [Online]. Available: http://www.worldcat.org/isbn/0321127420

E. Gamma, R. Helm, R. Johnson, and J. Vlissides, Design Patterns: Elements of Reusable Object-Oriented Software, 1st ed.    Addison-Wesley Professional, Nov. 1994. [Online]. Available: http://www.worldcat.org/isbn/0201633612

Y. Shoham, "Agent-oriented programming," Artif. Intell., vol. 60, no. 1, pp. 51-92, Mar. 1993. [Online]. Available: http://dx.doi.org/10.1016/0004-3702(93)90034-9
