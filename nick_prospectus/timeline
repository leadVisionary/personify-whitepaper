Timeline

Fall 2007
 -- Initiated graduate study in computer science. Focused on ASU's innovative new Biomedical Informatics program, promising an intersection between Computer Science and Medicine.
 -- Was compelled to learn about Edward Shortliffe's MYCIN system, an Expert System for medical diagnosis that met gold standard comparably well with doctors but was never deployed.
 -- Found that the program was very young, and he was too. This combination resulted in thrashing.

Spring 2008
 -- continued work in BMI, was lead software engineer for software engineering project implementing a research social network in BMI540
 -- Took software engineering courses in requirements and specification and project, process, quality management. Discovered a love of software engineering.

Fall 2008
 -- Took courses in information retrieval, social computing, and advanced geometric modeling. Was compelled to again see artifical intelligence algorithms pop up in multiple places, even citing links between Voronoi diagrams for drawing shapes in computer graphics and K-Means clustering for finding similarity between documents

Spring 2009
 -- Took courses in data mining and intelligent interactive instructional systems. 
 -- Found an application of artifical intelligence that moved him, using computers to help people learn. Was dumbfounded to see such systems had been prototyped and successfully deployed in academia, but have not made much social headway due to difficulty of construction and evolution. Much of this was hypothesized to be a result of lack of attention from software engineering expertise to building such systems, leaving them in research prototype stages
 -- Decided to become an expert software engineer and learn more about AI

Summer 2009
 -- Read Head First Design Patterns and The Pragmatic Programmer
 -- Worked as a research assistant on the Andes Intelligent Tutoring system project, writing a Java client to export information from the system to the Datashop XML format

Fall 2009
 -- Took courses in software security, analysis, and design
 -- Lead reading groups in software engineering for Pragmatic Programmer and Head First Design Patterns
 -- began work as the Web Developer Sr for ASU Physics, applying concepts learned in software engineering theory to build systems

Spring 2010
 -- Took courses in Information Assurance and Design of Engineering Experiments

Summer & Fall 2010
 -- Read Martin Flower's Patterns of Enterprise Application Architecture
 -- Frederick Brooks' The Mythical Man Month
 -- Andy Hunt's Pragmatic Thinking and Learning
 -- Len Bass Software Architecture in Practice

Spring 2011 
 -- Took course in motivational environments to study how computer science can improve motivation, leading to enhanced learning
 -- software internship at Intel to apply learnt concepts in applied environment

Summer 2011 
 -- Read Anti-Patterns, Clean Code
 -- Worked on architectural principles for reference model for ITS with other students

Fall 2011
 -- Decided to augment understanding of educational principles by taking courses in engineering education and educational design technology
 -- Prepared draft of dissertation prospectus
 -- Read Domain Driven Design, Test Driven Development By Example, Behavior Driven Development
 -- Began collaboration with Fractal Innovations LLC on tooling for NodeJS ecosystem

Spring 2012
 -- Began researching self-adaptive systems found research opportunity integrating all previous agile software engineering principles to apply in this space
 -- Prototyping Personify
 -- Built Scout, Archivist, Analyst, and Thinker archetypes using DDD principles with Design Patterns, specified using BDD
 -- Worked in conjunction with Fractal Innovations to develop a domain specific language for describing a software project as a collection of agents with models and services to scaffold out projects
 -- Augmented DSL to include notions of Goals, Beliefs, and communication strategies
 -- Build Uatu to have agents periodically run their tests and trigger adaptation when conditions fail
 -- Build Arbitrader, application built in Personify to prototype theoretical ideas and provide feedback 

Summer & Fall 2012 
 -- Refine Personify from findings of Arbitrader 
 -- Evaluate Personify with respect to other models (DEVS JAVA, TROPOS, KAOS) by developing functionally equivalent prototypes to prototypes built in those systems, comparing for: LoC, number of components, speed of development, future extensibility
 -- Prepare final results
    

 


        
